generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  name              String            @db.VarChar(255)
  email             String            @unique
  username          String?           @db.VarChar(255)
  slug              String?           @db.VarChar(255) @default("")
  password          String            @db.VarChar(255)
  salt              String?           @db.VarChar(255)
  address           String?           @db.VarChar(255)
  remember_token    String?           @db.VarChar(255)
  country           String?           @db.VarChar(255)
  bio               String?           @db.VarChar(255)
  role              Role?             @default(USER)
  gender            Gender?           @default(NONGENDERED)
  birth_date        DateTime?         @db.Timestamp(0)
  phone_number      String?           @db.VarChar(255)
  dialing_code      String?           @db.VarChar(128)
  email_verified_at DateTime?         @db.Timestamp(0)
  created_at        DateTime?         @default(now())
  updated_at        DateTime?         @updatedAt
  city              String?           @db.VarChar(255)
  Event             Event[]
  Order             Order[]
  image_profile     UserImageProfile?
}

model UserImageProfile {
  id        Int    @id @default(autoincrement())
  userId    Int    @unique
  version   Int    @default(0)
  image_url String @db.VarChar(255)
  file_id   String @db.VarChar(255)
  user      User   @relation(fields: [userId], references: [id])
}

model EventType {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  icon       String    @db.VarChar(255)
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  Event      Event[]
}

model EventCategory {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  Event      Event[]
}

model Event {
  id            Int           @id @default(autoincrement())
  slug          String        @unique
  name          String        @db.VarChar(255)
  description   String        @db.Text
  country       String        @db.VarChar(255)
  created_at    DateTime?     @default(now())
  updated_at    DateTime?     @updatedAt
  category_id   Int
  user_id       Int
  type_id       Int
  city          String        @db.VarChar(255)
  image_url     String        @db.VarChar(255)
  ended_date    DateTime      @default(now()) @db.Timestamp(0)
  start_date    DateTime      @default(dbgenerated("(_utf8mb4\\'0000-00-00 00:00:00\\')")) @db.Timestamp(0)
  EventCategory EventCategory @relation(fields: [category_id], references: [id], onDelete: Cascade)
  EventType     EventType     @relation(fields: [type_id], references: [id], onDelete: Cascade)
  User          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  EventPlan     EventPlan[]
  Order         Order[]

  @@index([category_id], map: "Event_category_id_fkey")
  @@index([user_id], map: "Event_user_id_fkey")
  @@index([type_id], map: "Event_type_id_fkey")
}

model EventPlan {
  id             Int              @id @default(autoincrement())
  event_id       Int
  name           String           @db.VarChar(255)
  created_at     DateTime?        @default(now())
  updated_at     DateTime?        @updatedAt
  amount         Int              @default(0)
  description    String           @db.Text
  ended_date     DateTime         @default(now()) @db.Timestamp(0)
  price          Decimal          @db.Decimal(10, 0)
  Event          Event            @relation(fields: [event_id], references: [id])
  OrderEventPlan OrderEventPlan[]

  @@index([event_id], map: "EventPlan_event_id_fkey")
}

model Order {
  id             Int              @id @default(autoincrement())
  user_id        Int
  total_price    Int
  created_at     DateTime?        @default(now())
  updated_at     DateTime?        @updatedAt
  event_id       Int
  Event          Event            @relation(fields: [event_id], references: [id], onDelete: Cascade)
  User           User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  OrderEventPlan OrderEventPlan[]
  Transaction    Transaction[]

  @@index([user_id], map: "Order_user_id_fkey")
  @@index([event_id], map: "Order_event_id_fkey")
}

model Transaction {
  id             Int                @id @default(autoincrement())
  user_id        Int
  order_id       Int
  payment_method String
  status         TransactionStatus? @default(INCOMPLETE)
  created_at     DateTime?          @default(now())
  updated_at     DateTime?          @updatedAt
  stripe_id      String
  Order          Order              @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@index([order_id], map: "Transaction_order_id_fkey")
}

model OrderEventPlan {
  id         Int       @id @default(autoincrement())
  user_id    Int
  plan_id    Int
  order_id   Int
  quantity   Int
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  Order      Order     @relation(fields: [order_id], references: [id], onDelete: Cascade)
  EventPlan  EventPlan @relation(fields: [plan_id], references: [id], onDelete: Cascade)

  @@index([order_id], map: "OrderEventPlan_order_id_fkey")
  @@index([plan_id], map: "OrderEventPlan_plan_id_fkey")
}

enum Role {
  USER
  ORGANIZER
}

enum Gender {
  MALE
  FEMALE
  NONGENDERED
}

enum TransactionStatus {
  INCOMPLETE
  SUCCEEDED
}
